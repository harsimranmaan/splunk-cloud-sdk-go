/*
 * Copyright Â© 2019 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * Splunk Search Service
 *
 * Use the Search service to dispatch, review, and manage searches and search jobs. You can also finalize or cancel running search jobs, retrieve search results and events, and request search-related configurations from the Metadata Catalog service.
 *
 * API version: v2beta1.1 (recommended default)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
 */

package search

import (
	"net/http"

	"github.com/splunk/splunk-cloud-sdk-go/v2/services"
	"github.com/splunk/splunk-cloud-sdk-go/v2/util"
)

const serviceCluster = "api"

type Service services.BaseService

// NewService creates a new search service client from the given Config
func NewService(config *services.Config) (*Service, error) {
	baseClient, err := services.NewClient(config)
	if err != nil {
		return nil, err
	}
	return &Service{Client: baseClient}, nil
}

/*
	CreateJob - search service endpoint
	Creates a search job.
	Parameters:
		searchJob
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) CreateJob(searchJob SearchJob, resp ...*http.Response) (*SearchJob, error) {
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/search/v2beta1/jobs`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Post(services.RequestParams{URL: u, Body: searchJob})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SearchJob
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	GetJob - search service endpoint
	Return the search job with the specified search ID (SID).
	Parameters:
		sid: The search ID.
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) GetJob(sid string, resp ...*http.Response) (*SearchJob, error) {
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SearchJob
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	ListEventsSummary - search service endpoint
	Return events summary, for search ID (SID) search.
	Parameters:
		sid: The search ID.
		query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListEventsSummary(sid string, query *ListEventsSummaryQueryParams, resp ...*http.Response) (*ListSearchResultsResponse, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}/timeline-metadata/auto/events-summary`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb ListSearchResultsResponse
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	ListFieldsSummary - search service endpoint
	Return fields stats summary of the events to-date, for search ID (SID) search.
	Parameters:
		sid: The search ID.
		query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListFieldsSummary(sid string, query *ListFieldsSummaryQueryParams, resp ...*http.Response) (*FieldsSummary, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}/timeline-metadata/auto/fields-summary`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb FieldsSummary
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	ListJobs - search service endpoint
	Return the matching list of search jobs.
	Parameters:
		query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListJobs(query *ListJobsQueryParams, resp ...*http.Response) ([]SearchJob, error) {
	values := util.ParseURLParams(query)
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/search/v2beta1/jobs`, nil)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb []SearchJob
	err = util.ParseResponse(&rb, response)
	return rb, err
}

/*
	ListPreviewResults - search service endpoint
	Return the preview search results for the job with the specified search ID (SID). Can be used when a job is running to return interim results.
	Parameters:
		sid: The search ID.
		query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListPreviewResults(sid string, query *ListPreviewResultsQueryParams, resp ...*http.Response) (*ListPreviewResultsResponse, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}/results-preview`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb ListPreviewResultsResponse
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	ListResults - search service endpoint
	Return the search results for the job with the specified search ID (SID).
	Parameters:
		sid: The search ID.
		query: a struct pointer of valid query parameters for the endpoint, nil to send no query parameters
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListResults(sid string, query *ListResultsQueryParams, resp ...*http.Response) (*ListSearchResultsResponse, error) {
	values := util.ParseURLParams(query)
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(values, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}/results`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb ListSearchResultsResponse
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	ListTimeBuckets - search service endpoint
	Return event distribution over time of the untransformed events read to-date, for search ID(SID) search.
	Parameters:
		sid: The search ID.
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) ListTimeBuckets(sid string, resp ...*http.Response) (*TimeBucketsSummary, error) {
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}/timeline-metadata/auto/time-buckets`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Get(services.RequestParams{URL: u})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb TimeBucketsSummary
	err = util.ParseResponse(&rb, response)
	return &rb, err
}

/*
	UpdateJob - search service endpoint
	Update the search job with the specified search ID (SID) with an action.
	Parameters:
		sid: The search ID.
		updateJob
		resp: an optional pointer to a http.Response to be populated by this method. NOTE: only the first resp pointer will be used if multiple are provided
*/
func (s *Service) UpdateJob(sid string, updateJob UpdateJob, resp ...*http.Response) (*SearchJob, error) {
	pp := struct {
		Sid string
	}{
		Sid: sid,
	}
	u, err := s.Client.BuildURLFromPathParams(nil, serviceCluster, `/search/v2beta1/jobs/{{.Sid}}`, pp)
	if err != nil {
		return nil, err
	}
	response, err := s.Client.Patch(services.RequestParams{URL: u, Body: updateJob})
	if response != nil {
		defer response.Body.Close()

		// populate input *http.Response if provided
		if len(resp) > 0 && resp[0] != nil {
			*resp[0] = *response
		}
	}
	if err != nil {
		return nil, err
	}
	var rb SearchJob
	err = util.ParseResponse(&rb, response)
	return &rb, err
}
